pub mod error {
    use thiserror::Error;

    #[derive(Error, Debug)]
    pub enum Error {
        #[error("failed to parse '{what}' to {to} because {why}")]
        ParserError {
            what: String,
            to: &'static str,
            why: String,
        },
    }
}

pub mod redhat {
    use crate::cve::Cve;
    use crate::error::Error;
    use cvss::v3::Base;
    use serde::Deserialize;
    use std::convert::TryFrom;
    use std::str::FromStr;

    #[derive(Debug, Deserialize)]
    pub struct RedHat {
        pub name: String,
        pub cvss3: Cvss3
    }

    #[derive(Debug, Deserialize)]
    #[serde(rename = "cvss3")]
    pub struct Cvss3 {
        #[serde(rename = "cvss3_base_score")]
        pub base_score: String,
        #[serde(rename = "cvss3_scoring_vector")]
        pub scoring_vector: String,
    }

    impl TryFrom<RedHat> for Cve {
        type Error = Error;

        fn try_from(redhat: RedHat) -> Result<Self, Self::Error> {
            let name = redhat.name;
            let scoring_vector = redhat.cvss3.scoring_vector;
            let base = Base::from_str(&scoring_vector)
                .map_err(|e| Error::ParserError {what: scoring_vector, to: "Cve", why: e.to_string()})?;

            let base_score = base.score().value();
            let severity = base.severity();
            Ok(Cve{
                id: name,
                base,
                base_score,
                severity,
            })
        }
    }

}

pub mod cve {
    use cvss::v3::Base;
    use cvss::Severity;

    #[derive(Debug)]
    pub struct Cve {
        pub id: String,
        pub base: Base,
        pub base_score: f64,
        pub severity: Severity,
    }
}

use crate::redhat::RedHat;
use crate::cve::Cve;
use std::convert::TryInto;
use tabwriter::TabWriter;
use std::io::Write;

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    let resp = reqwest::get("https://access.redhat.com/labs/securitydataapi/cve/CVE-2020-14803.json")
        .await?
        .json::<RedHat>()
        .await?;

    let cve: Cve = resp.try_into().expect("Failed to parse Cve");

    let mut tw = TabWriter::new(vec![]);
    let _ = writeln!(tw, "{cve}\t{score}\t{severity}\t{vector}",
        cve = &cve.id, score = cve.base_score, severity = cve.severity.as_str(), vector = &cve.base.to_string()
    );
    tw.flush().unwrap();
    let written = String::from_utf8(tw.into_inner().unwrap()).unwrap();
    println!("{}", written);


    Ok(())
}
