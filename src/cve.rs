use crate::error::{Error, Result};
use cvss::v3::Base;
use cvss::Severity;
use std::cmp::Ordering;
use std::str::FromStr;

#[derive(Debug)]
pub struct Cve {
    pub id: String,
    pub base: Base,
    pub base_score: f64,
    pub severity: Severity,
}

impl Cve {
    pub fn from_cve_str(id: String, cve_str: String) -> Result<Cve> {
        let scoring_vector = cve_str;
        let base = Base::from_str(&scoring_vector).map_err(|e| Error::ParserError {
            what: scoring_vector,
            to: "Cve",
            why: e.to_string(),
        })?;

        let base_score = base.score().value();
        let severity = base.severity();
        Ok(Cve {
            id,
            base,
            base_score,
            severity,
        })
    }
}

impl PartialEq for Cve {
    fn eq(&self, other: &Self) -> bool {
        self.id == other.id && self.base_score.eq(&other.base_score)
    }
}

impl PartialOrd for Cve {
    fn partial_cmp(&self, other: &Self) -> Option<Ordering> {
        self.base_score.partial_cmp(&other.base_score)
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use spectral::prelude::*;

    #[test]
    fn from_cve_str() {
        let id = "CVE-2020-14803".to_string();
        let cve_str = "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N".to_string();

        let res = Cve::from_cve_str(id, cve_str);

        asserting("Parsing CVE vector successfully")
            .that(&res)
            .is_ok()
            .map(|x| &x.base_score)
            .is_equal_to(5.3f64);
    }

    #[test]
    fn order() {
        let mut cves = vec![
            Cve::from_cve_str(
                "CVE-2020-14804".to_string(),
                "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:N/I:N/A:H".to_string(),
            )
            .unwrap(),
            Cve::from_cve_str(
                "CVE-2020-14803".to_string(),
                "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N".to_string(),
            )
            .unwrap(),
        ];
        let sorted_cves = vec![
            Cve::from_cve_str(
                "CVE-2020-14804".to_string(),
                "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:N/I:N/A:H".to_string(),
            )
            .unwrap(),
            Cve::from_cve_str(
                "CVE-2020-14803".to_string(),
                "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N".to_string(),
            )
            .unwrap(),
        ];

        cves.sort_by(|this, that| Cve::partial_cmp(this, that).unwrap()); // safe

        asserting("Sorting works successfully")
            .that(&cves)
            .is_equal_to(&sorted_cves);
    }
}
